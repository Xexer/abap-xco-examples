CLASS zcl_bs_demo_xco_repository DEFINITION
  PUBLIC
  INHERITING FROM cl_xco_cp_adt_simple_classrun FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

  PROTECTED SECTION.
    METHODS
      main REDEFINITION.

  PRIVATE SECTION.
    CONSTANTS transport_request TYPE sxco_transport VALUE 'AEDK901759' ##NO_TEXT.

    METHODS read_object
      IMPORTING !out TYPE REF TO if_xco_adt_classrun_out.

    METHODS create_object
      IMPORTING !out TYPE REF TO if_xco_adt_classrun_out.

ENDCLASS.


CLASS zcl_bs_demo_xco_repository IMPLEMENTATION.
  METHOD main.
*    read_object( out ).
    create_object( out ).
  ENDMETHOD.


  METHOD read_object.
    DATA(class) = xco_cp_abap=>class( 'ZCL_BS_DEMO_XCO_BROKEN' ).

    DATA(syntax) = class->check_syntax( ).
    out->write_news( syntax ).

    DATA(source) = class->implementation->method( 'PRIVATE_STUFF' )->content( )->get_source( ).
    out->plain->write( source ).
  ENDMETHOD.


  METHOD create_object.
    DATA(operation) = xco_cp_generation=>environment->dev_system( transport_request )->create_put_operation( ).

    DATA(specification) = operation->for-clas->add_object( 'ZCL_BS_DEMO_XCO_GENERATED'
      )->set_package( 'ZBS_DEMO_XCO'
      )->create_form_specification( ).

    specification->set_short_description( `Generated by ZCL_BS_DEMO_XCO_REPOSITORY` ).

    specification->definition->add_interface( 'IF_OO_ADT_CLASSRUN' ).
    specification->implementation->add_method( 'IF_OO_ADT_CLASSRUN~MAIN' )->set_source(
        VALUE #( ( `    say_hello( name = 'Bernd' out = out ).` ) ) ).

    specification->definition->section-private->add_type( `name` )->for( xco_cp_abap=>type-source->for( 'c LENGTH 60' ) ).

    DATA(method) = specification->definition->section-private->add_method( 'SAY_HELLO' ).
    method->add_importing_parameter( 'NAME' )->set_default_value( `'Herbert'` )->set_type(
        xco_cp_abap=>type-source->for( 'name' ) ).
    method->add_importing_parameter( 'OUT' )->set_type( xco_cp_abap=>interface( 'IF_OO_ADT_CLASSRUN_OUT' ) ).

    specification->implementation->add_method( 'SAY_HELLO' )->set_source(
        VALUE #( ( `    out->write( |Hello { name }| ).` ) ) ).

*    DATA(result) = operation->execute( VALUE #( ( xco_cp_generation=>put_operation_option->skip_activation ) ) ).
    DATA(result) = operation->execute( ).
    out->write_news( result->findings ).
  ENDMETHOD.
ENDCLASS.
